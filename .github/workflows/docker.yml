name: Docker CI

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  PYTHON_VERSION: "3.11"
  MODEL_VERSION: "v0.1"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # -------- Pre-build: train artifacts on the runner --------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deps for training
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Train and create artifacts
        run: |
          set -eux
          python -m src.train --version "${MODEL_VERSION}" --out-root model/artifacts || true
          # Ensure the versioned dir exists even if training produced nothing,
          # so docker COPY doesn't fail hard.
          mkdir -p "model/artifacts/${MODEL_VERSION}"
          # Keep file so empty dirs persist
          touch "model/artifacts/${MODEL_VERSION}/.keep"
          echo "Artifacts tree:"
          ls -la model || true
          ls -la model/artifacts || true
          ls -la "model/artifacts/${MODEL_VERSION}" || true

      # -------- Build & push image --------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build (and push when not a PR)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/virtualdiabeticsclinic:latest
            ghcr.io/${{ github.repository_owner }}/virtualdiabeticsclinic:${{ github.sha }}
          build-args: |
            MODEL_VERSION=${{ env.MODEL_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

